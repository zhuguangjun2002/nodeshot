项目首页：
--------------
https://github.com/mbi/django-rosetta
--------------
使用手册:
--------------
http://django-rosetta.readthedocs.io/en/latest/
--------------

=============================================
先学两个命令;
*.po 应该是原始的文件
*.mo 是编译后的文件
--------------------------
$find . -name "*.po"
$find . -name "*.mo"
--------------------------

在项目根目录上，运行结果如下：
--------------------------
user@osgeolive:~/project/nodeshot/nodeshot$ find . -name "*.po"
./nodeshot/ui/default/locale/ca/LC_MESSAGES/django.po
./nodeshot/ui/default/locale/ca/LC_MESSAGES/djangojs.po
./nodeshot/ui/default/locale/es/LC_MESSAGES/django.po
./nodeshot/ui/default/locale/es/LC_MESSAGES/djangojs.po
./nodeshot/ui/default/locale/en/LC_MESSAGES/django.po
./nodeshot/ui/default/locale/en/LC_MESSAGES/djangojs.po
./nodeshot/ui/default/locale/it/LC_MESSAGES/django.po
./nodeshot/ui/default/locale/it/LC_MESSAGES/djangojs.po
./nodeshot/ui/default/locale/de/LC_MESSAGES/django.po
./nodeshot/ui/default/locale/de/LC_MESSAGES/djangojs.po
--------------------------
user@osgeolive:~/project/nodeshot/nodeshot$ find . -name "*.mo"
./nodeshot/ui/default/locale/ca/LC_MESSAGES/django.mo
./nodeshot/ui/default/locale/ca/LC_MESSAGES/djangojs.mo
./nodeshot/ui/default/locale/es/LC_MESSAGES/django.mo
./nodeshot/ui/default/locale/es/LC_MESSAGES/djangojs.mo
./nodeshot/ui/default/locale/en/LC_MESSAGES/django.mo
./nodeshot/ui/default/locale/en/LC_MESSAGES/djangojs.mo
./nodeshot/ui/default/locale/it/LC_MESSAGES/django.mo
./nodeshot/ui/default/locale/it/LC_MESSAGES/djangojs.mo
--------------------------
=============================================



===================================
1. 安装

我们发现安装最新版本的时候，提示找不到`rosetta-home`.
所以，之前我们成功安装了`django-rosetta==0.7.6`.
后来发现：`django-rosetta==0.7.13`也是可以，所以我们最终选择`0.7.13`.
更新到`requirement.txt`.


查看CHANGES
--------------------
https://github.com/mbi/django-rosetta/blob/develop/CHANGES
--------------------
===================================
2. 设置
========================
++ ROSETTA_CACHE_NAME: 
When using `rosetta.storage.CacheRosettaStorage`, you can store the Rosetta data in a specific cache. 
This is particularly useful when your default cache is a `django.core.cache.backends.dummy.DummyCache` (which happens on pre-production environments). 
If unset, it will default to `rosetta` if a cache with this name exists, or default if not.
如果没有设置，默认使用`rosetta`,如果一个使用该名字的`cache`存在的话。

我们项目的，指定的就是`rosetta`.
-------------------
ROSETTA_CACHE_NAME = 'rosetta'
-------------------
在文件` nodeshot/conf/settings.py `中，配置了该`cache`,如下所示：
-------------------
CACHES = {
    'rosetta': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'rosetta'
    }
}
-------------------


========================


========================
++ ROSETTA_MESSAGES_PER_PAGE: Number of messages to display per page. Defaults to 10.
每页显示的消息数目，默认是10.
我们的项目，设置的值是`50`.
-------------------
ROSETTA_MESSAGES_PER_PAGE = 50
-------------------

========================

========================
++ ROSETTA_EXCLUDED_APPLICATIONS: 
Exclude applications defined in this list from being translated. Defaults to ().

我们的项目，
-----------------
ROSETTA_EXCLUDED_APPLICATIONS = [app for app in INSTALLED_APPS if not app.startswith('nodeshot')]
-----------------
凡是在`INSTALLED_APPS`中，不是以`nodeshot`开头的`app`,都排除在翻译之外。
========================

================================================
3. 存储
Storages
To prevent re-reading and parsing the PO file catalogs over and over again, Rosetta stores them in a volatile location. This can be either the HTTP session or the Django cache.

Django 1.4 has introduced a signed cookie session backend, which stores the whole content of the session in an encrypted cookie. Unfortunately this doesn’t work with large PO files, as the limit of 4096 chars that can be stored in a cookie is easily exceeded.

In this case the Cache-based backend should be used (by setting ROSETTA_STORAGE_CLASS = 'rosetta.storage.CacheRosettaStorage'). Please make sure that a proper CACHES backend is configured in your Django settings if your Django app is being served in a multi-process environment, or the different server processes, serving subsequent requests, won’t find the storage data left by previous requests.

Alternatively you can switch back to using the Session based storage by setting ROSETTA_STORAGE_CLASS = 'rosetta.storage.SessionRosettaStorage' in your settings. This is perfectly safe on Django 1.3. On Django 1.4 or higher make sure you have DON’T use the signed_cookies SESSION_BACKEND with this Rosetta storage backend or funky things might happen.

TL;DR: if you run Django with gunincorn, mod-wsgi or other multi-process environment, the Django-default CACHES LocMemCache backend won’t suffice: use memcache instead, or you will run into issues.
TL; DR：如果你使用`gunincorn`，`mod-wsgi`或其他`多进程环境`运行Django，则`Django`默认的`CACHES` `LocMemCache后端`将不够用：或者使用`memcache`，否则会遇到问题。

我们这里`暂时`记录下来，留作备忘；
因为我们的`项目`目前是在`开发环境`中用到了`LocMemCache`.
不知道该`项目`在`生成部署`的时候，自动生成的`配置文件`中，是否会有一些调整。
================================================


================================================
4. 使用 Usage
--------------------
http://django-rosetta.readthedocs.io/en/latest/usage.html
--------------------

================================================

